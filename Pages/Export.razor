@page "/export"
@inject IAppData? appData
@inject NavigationManager Navigation
@inject IProfileUtility ProfileUtilities
@inject IList<Fund> Funds
@inject HttpClient Http
@using Models

<PageTitle>@pageHeading</PageTitle>

<div style=float:left>
    <h4 style="max-width:450px">
        @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
    </h4>
</div>
<div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

<div style=clear:left>
    <br/>
    <br/>
    <b>Feature Under design...</b><br/>
    <span style="foreground:black">export portfolio to Excel, Sheets, or CSV</span>

   <!--
   <button @onclick=@exportCSV title=Export style=min-width:80px; @bind-disabled:event=onchange >Export as CSV</button>
   -->
   <br/>
   <br/>
   See Bogleheads.org <a href="https://www.bogleheads.org/forum/viewtopic.php?p=8396870#p8396870">forum post about this export feature</a>
   <br/>
   <br/>

    <div>
            @if (appData.FamilyData.Accounts.Count > 0)
            {
                <div>Broker,Account,TaxType,Type,Owner,Ticker,Shares,Price,Value,Investment,ExpenseRatio,InvestmentCategory,closeYest,AnnualFees,AccountOwnerAndType</div>
            }
            @{var rowCount = 1;}
            @foreach (var account in appData.FamilyData.Accounts.OrderBy(a => a.Custodian).ThenByDescending(a => a.Value))
            {
                bool isTreasuryDirect = account.Custodian?.ToLowerInvariant() == "treasury direct" || account.Custodian?.ToLowerInvariant() == "treasurydirect";
                foreach (var investment in account.Investments.OrderByDescending(a => a.Value))
                {
                    rowCount++;
                    @* if (investment.Ticker == "IBOND" && !ibondHeaderShown)
                    {
                        ibondHeaderShown = true;
                        <tr style=vertical-align:bottom>
                            <td style=padding-left:8px>Holding</td>
                            <td style=padding-left:8px;text-align:center>'Fixed'<br />Rate</td>
                            <td style=padding-left:8px;text-align:center>Current<br />Rate</td>
                            <td style=padding-left:8px;text-align:center>Balance</td>
                        </tr>
                    } *@
                    <div>
                        @account.Custodian,
                        @(account.Note == null || account.Note == "" ?
                            account.Identifier :
                            account.Note
                            ),
                        @account.TaxType2,
                        @(account.AccountType == "Taxable" ? "Brokerage" : @account.AccountType),
                        @account.Identifier,
                        @(investment.Ticker != null ? investment.Ticker : investment.Name),
                        @(investment.Ticker == "IBOND" ? @investment.Value / 25 : @investment.Shares),
                        @(investment.InvestmentOrderCategory == "Cash" ? "1.0" : 
                           (@investment.Ticker == "IBOND" ? "25" : "=googlefinance(f"+@rowCount+")")),
                        @("=g"+@rowCount+"*h"+@rowCount),
                        @investment.Name,
                        @investment.ExpenseRatio,
                        @investment.InvestmentOrderCategory,
                        @(investment.InvestmentOrderCategory == "Cash" ? "1.0" : 
                           investment.Ticker == "IBOND" ? "25" : "\"=googlefinance(f"+@rowCount+",\"\"closeyest\"\")\""
                           ),
                        @("=K"+@rowCount+"*I"+@rowCount+"/100"),
                        @("\"=CONCATENATE(E"+@rowCount+",IF(E"+@rowCount+"<>\"\"\"\",\"\" \"\",\"\"\"\"),D"+@rowCount+")\"")
                    
                    </div>
                        @* <td>
                            @if (investment.IsIBond)
                            {
                                <span>&nbsp;</span>

                                @FormatUtilities.FormatMonthPlus2DigitYear(investment.PurchaseDate)
                            }
                        </td>
                        @if (investment.IsIBond)
                        {
                            <td style=text-align:right>@FormatUtilities.FormatPercent3(investment.InterestRate)</td>
                            <td style=text-align:right>@FormatUtilities.FormatPercent3(investment.CurrentRate)</td>
                        }
                        else
                        {
                            <td style=text-align:right;padding-left:8px>@FormatUtilities.FormatDoubleTwoDecimal(investment.Shares)</td>
                            <td style=text-align:right;padding-left:8px>@FormatUtilities.FormatMoney(investment.Price)</td>
                        }

                        <td style=text-align:right;padding-left:8px>
                            @FormatUtilities.FormatMoney(investment.Value, decimalPlaces: 0)
                        </td> *@
                    @* if (investment.IsIBond && investment.NextRate.HasValue)
                    {
                        <tr style=background-color:@bgColor >
                            <td colspan=2 style=text-align:right>
                                as of @FormatUtilities.FormatMonthPlus2DigitYear(@investment.NextRateStart):
                            </td>
                            <td style=text-align:right>
                                @FormatUtilities.FormatPercent3(investment.NextRate)
                            </td>
                            <td></td>
                        </tr>
                    } *@
                }
            }
    </div>                                                      
</div>

@code {
    private async Task exportCSV()
    {
        if (appData?.FamilyData != null)
        {
           // await ProfileUtilities.ExportCSV(appData.CurrentProfileName, appData.FamilyData);
        }
    }
    private async Task OnDataFilesImport(InputFileChangeEventArgs e)
    {
        var namedStreams = BlazorUtilities.GetNamedStreamsFromBrowserFiles(e.GetMultipleFiles());

        if (appData?.FamilyData is not null && namedStreams is not null)
        {
            appData.ImportResult = await Importer.ImportDataFiles(namedStreams, appData.FamilyData);
            foreach (var account in appData.ImportResult.NewAccounts)
            {
                account.Import = true;
            }

            if (appData.ImportResult.UpdatedAccounts.Count == 0)
            {
                appData.ImportResult.ImportNewAccounts = true;
            }

            if (appData.ImportResult.NewAccounts.Count == 0)
            {
                appData.ImportResult.ImportUpdatedAccounts = true;
            }

            foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
            {
                if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
                {
                    foreach (var updatedInvestment in updatedAccount.Investments)
                    {
                        foreach (var existingInvestment in updatedAccount.ReplaceAccount.Investments)
                        {
                            if (existingInvestment.Ticker == updatedInvestment.Ticker)
                            {
                                updatedInvestment.CostBasis = existingInvestment.CostBasis;
                            }
                        }
                    }
                }
            }
        }
    }
    
    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

    protected override void OnInitialized()
    {
        pageHeading = "Export Center";
        base.OnInitialized();
    }

    private bool showError { get; set; }
    private string? pageHeading;
    private bool csvImport = false;
}