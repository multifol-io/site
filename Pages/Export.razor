@page "/export"
@inject IAppData? appData
@inject NavigationManager Navigation
@inject IProfileUtility ProfileUtilities
@inject IList<Fund> Funds
@inject HttpClient Http
@using Models
@using System.Text

<PageTitle>@pageHeading</PageTitle>

<div style=float:left>
    <h4 style="max-width:450px">
        @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
    </h4>
</div>
<div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

<div style=clear:left>
    <br/>
    <br/>
    <span style="foreground:black">To export portfolio to Google Sheets spreadsheet:</span><br/>


    <div>
        1. Load your portfolio info into this site. By hand entering the data in <a href=/portfolio-tracker>Portfolio Tracker</a>, or use the <a href=/import>Import Center</a> to import several CSV files from your brokerages.
    </div>
    <div>
        2. Open Google Sheets spreadsheet to host data from CSV file, and help visualize it:
        <a target=_new href="https://docs.google.com/spreadsheets/d/1tOFfjaYKBCBgNRNJkHQstC2rEffFd0hmKdrbIkhQgB0/edit?gid=1171143215#gid=1171143215">Multifolio Template</a>
    </div>                      
    <div>
        3. In order to be able to personalize the data in the sheet, you need to create a copy of your own. In google sheets, File -> Make a copy. Save in "my drive" or similar location. Name the sheet "My Multifolio" or "&lt;MyInitials&gt; Multifolio", or the name of your chosing.
    </div>                                
    <div>
        4. <button @onclick="DownloadCsv">Download CSV</button>
    </div>
    <div>
        5. In your new sheet, go to "data" tab. To pick correct import location, click on cell A9 which reads "Broker".
    </div>
    <div>
        6. File -> Import -> Upload. Choose the CSV file that you downloaded in step 4.
    </div>
    <div>
        7. "Import file" dialog choices: change Import Location to: Replace data at selected cell.
    </div>
    <div>
        8. View the different tabs, which show the newly imported data in different ways.
    </div>
    <div>
        9. On the summary tab, there are a few "TODOs" at the bottom to begin to personalize your multifolio sheet.
    </div>


   <br/>
   <br/>
   See Bogleheads.org <a href="https://www.bogleheads.org/forum/viewtopic.php?p=8396870#p8396870">forum post about this export feature</a>
   <br/>
   <br/>
</div>

@code {
    private async Task DownloadCsv()
    {
        string? csvContent = GenerateCsv();  // Generate CSV content

        if (csvContent != null)
        {
            // Call JavaScript function to download CSV
            await JS.InvokeVoidAsync("downloadFile", appData?.FamilyData?.AppData.CurrentProfileName + " multifolio.csv", csvContent);
        }
    }
    private string? GenerateCsv()
    {
        if (appData?.FamilyData?.Accounts.Count > 0)
        {
            var csv = new StringBuilder();
            csv.AppendLine("Broker,Account,TaxType,Type,Owner,Ticker,Shares,Price,Value,Investment,ExpenseRatio,InvestmentCategory,closeYest,AnnualFees,AccountOwnerAndType");
            var rowCount = 1;
            foreach (var account in appData.FamilyData.Accounts.OrderBy(a => a.Custodian).ThenByDescending(a => a.Value))
            {
                bool isTreasuryDirect = account.Custodian?.ToLowerInvariant() == "treasury direct" || account.Custodian?.ToLowerInvariant() == "treasurydirect";
                foreach (var investment in account.Investments.OrderByDescending(a => a.Value))
                {
                    rowCount++;
                    csv.AppendLine(
                        account.Custodian + "," +
                        (account.Note == null || account.Note == "" ?
                            account.Identifier :
                            account.Note
                        ) + "," +
                        account.TaxType2 + "," +
                        (account.AccountType == "Taxable" ? "Brokerage" : @account.AccountType)+ "," +
                        account.Identifier+ "," +
                        (investment.Ticker != null ? investment.Ticker : investment.Name)+ "," +
                        (investment.Ticker == "IBOND" ? @investment.Value / 25 : @investment.Shares)+ "," +
                        (investment.InvestmentOrderCategory == "Cash" ? "1.0" : 
                            (investment.Ticker == "IBOND" ? "25" : "=googlefinance(f"+@rowCount+")")) + "," +
                        ("=g"+@rowCount+"*h"+@rowCount)+ "," +
                        investment.Name+ "," +
                        investment.ExpenseRatio+ "," +
                        investment.InvestmentOrderCategory+ "," +
                        (investment.InvestmentOrderCategory == "Cash" ? "1.0" : 
                            investment.Ticker == "IBOND" ? "25" : "\"=googlefinance(f"+@rowCount+",\"\"closeyest\"\")\""
                            )+ "," +
                        ("=K"+@rowCount+"*I"+@rowCount+"/100")+ "," +
                        ("\"=CONCATENATE(E"+@rowCount+",IF(E"+@rowCount+"<>\"\"\"\",\"\" \"\",\"\"\"\"),D"+@rowCount+")\"")
                    );
                }
            }

            return csv.ToString();
        }

        return null;
    }

    private async Task exportCSV()
    {
        if (appData?.FamilyData != null)
        {
           // await ProfileUtilities.ExportCSV(appData.CurrentProfileName, appData.FamilyData);
        }
    }
    private async Task OnDataFilesImport(InputFileChangeEventArgs e)
    {
        var namedStreams = BlazorUtilities.GetNamedStreamsFromBrowserFiles(e.GetMultipleFiles());

        if (appData?.FamilyData is not null && namedStreams is not null)
        {
            appData.ImportResult = await Importer.ImportDataFiles(namedStreams, appData.FamilyData);
            foreach (var account in appData.ImportResult.NewAccounts)
            {
                account.Import = true;
            }

            if (appData.ImportResult.UpdatedAccounts.Count == 0)
            {
                appData.ImportResult.ImportNewAccounts = true;
            }

            if (appData.ImportResult.NewAccounts.Count == 0)
            {
                appData.ImportResult.ImportUpdatedAccounts = true;
            }

            foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
            {
                if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
                {
                    foreach (var updatedInvestment in updatedAccount.Investments)
                    {
                        foreach (var existingInvestment in updatedAccount.ReplaceAccount.Investments)
                        {
                            if (existingInvestment.Ticker == updatedInvestment.Ticker)
                            {
                                updatedInvestment.CostBasis = existingInvestment.CostBasis;
                            }
                        }
                    }
                }
            }
        }
    }
    
    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

    protected override void OnInitialized()
    {
        pageHeading = "Export Center";
        base.OnInitialized();
    }

    private bool showError { get; set; }
    private string? pageHeading;
    private bool csvImport = false;

    [Inject]
    private IJSRuntime JS { get; set; }
}