@page "/savings-planner"
@page "/savings-planner/{stepPath}"
@page "/saving"
@page "/saving/{stepPath}"
@page "/portfolio-contributions"
@inject HttpClient Http
@inject IAppData appData
@inject IJSRuntime JS
@inject IProfileUtility ProfileUtilities
@using Employer
@inject NavigationManager Navigation
@using System.Text.Json.Serialization
@using Models

<PageTitle>
Savings@(stepPath==null?" Planner":": "+stepPath.Replace('-',' ')) - MultiFol.io
</PageTitle>

<style>
    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>

    @if (steps == null || appData == null || familyData == null)
    {
        <p>
            @if(appData!.CurrentProfileName==null){<em>No active <a href=/profiles>profile</a>.</em>} 
            else {<em>Loading...</em>}
        </p>
        <div style=float:left;margin-left:50px><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >
            @if(appData.CurrentProfileName==null){<span>choose a</span>}else {<span>@appData.CurrentProfileName</span>}</a> profile
        </div>
    }
    else
    {
        @if (stepPath == null) {
            var prevStep = steps[steps.Length - 1];
            var nextStep = steps[0];
            string prevPage = folderName + prevStep?.step;
            string nextPage = folderName + nextStep?.step;
            pastTotal = false;
            int? runningTotal = 0;
            int itemTotal = 0;
            var required = (appData.FamilyData!.TaxFilingStatus == TaxFilingStatus.ChoiceNeeded) ? "visibility:visible;color:red" : "visibility:hidden";

            <div style=float:left>
                <h4 style="max-width:450px">
                    @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
                </h4>
            </div>
            <div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

            <p style=clear:left>To save money efficiently, you should prioritize the most efficient techniques. This tool has integrated the advice from <a target=_blank href="https://www.bogleheads.org/wiki/Prioritizing_investments">Bogleheads Prioritizing Investments wiki</a> ↗️. Review and complete the steps below.</p>

            <div>
                <p ><b>Prerequisities:</b></p>
                <EditForm Model="familyData" style=margin-left:25px>
                    <label>Target Year:</label> <select @bind=familyData.Year><option>2023</option><option>2024</option></select><br/>
                    <span>People Details:</span><br/>
                    <div style=margin-left:25px>
                        <label>Tax Filing Status:</label>
                        <select @bind=familyData.TaxFilingStatus>
                            <option value="ChoiceNeeded">ChoiceNeeded</option>
                            <option>Single</option>
                            <option value=MarriedFilingJointly>Married filing jointly</option>
                            <option value=MarriedFilingSeperately>Married filing separately</option>
                            <option value=HeadOfHousehold>Head of Household</option>
                        </select> <span style=@required>*</span><br/>
                        @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                            <p>@switch(familyData.PersonCount) {
                                default:
                                case 0:
                                    break;
                                case 1:
                                    <span>@familyData.People[0].PossessiveID</span>
                                    break;
                                case 2:
                                    <span>@familyData.People[0].PossessiveID &amp; @familyData.People[1].PossessiveID</span>
                                    break;
                            }
                                Income/Savings Budget</p>
                        }
                        @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                            @for (int i = 0; i < familyData.PersonCount; i++) {
                                var person = familyData.People[i];
                                if (person is not null) {

                                    <span>Person @(i+1):</span><br/>
                                    <div style=margin-left:25px>
                                        <label>Age:</label> <input style=width:60px type=number min=0 max=125 @bind-Value=person.Age @bind-Value:event=oninput /> (after birthday in @appData.FamilyData.Year)<br/>
                                        @if (familyData.PersonCount > 1) {
                                            <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                                <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                <option>person @(i+1)</option>
                                                <option>him</option>
                                                <option>her</option>
                                                <option>me</option>
                                                <option>them</option>
                                            </select><br/>
                                        }

                                        <label>Employer:</label> <input style=width:200px type=text @bind-Value=person.EmployerBenefits!.Company @bind-Value:event=oninput /><br/>
                                        <label>Annual Salary + Bonus:</label> $<input type=text class=dollar @bind-Value=person.EmployerPlan.AnnualSalary @bind-Value:event=oninput /><br/>
                                        <label><a href=/rsu-tracker>Vesting RSUs</a>:</label> <span>@FormatUtilities.FormatMoney(person.VestAmount(),decimalPlaces:0)</span><br/>
                                    </div>
                                }
                            }
                            <b>Total Earned Income:</b> @FormatUtilities.FormatMoney(familyData.TotalIncome)<br/>
                        }
                    </div>
                    @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                        <hr/>
                        <div style=margin-left:25px>
                            <label>Monthly Expenses:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/>
                            <label>Annual Income Tax Paid:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.IncomeTaxPaid" @bind-Value:event="oninput" /><br/>
                            <b>Annual Expenses:</b> @FormatUtilities.FormatMoney(familyData.EmergencyFund.MonthlyExpenses*12+familyData.IncomeTaxPaid)<br/>
                            <hr/>
                            <label>Money in Taxable Fund, to help invest more:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.TaxableToInvest" @bind-Value:event="oninput" /><br/>
                            <b>Planned Savings:</b> <span>@FormatUtilities.FormatMoney(familyData.PlannedSavings)</span><br/>
                            <hr/>
                            <label>Estimated Adjusted Gross Income:</label>
                            <span>$</span>
                            <input type=text class=dollar @bind-Value=familyData.AdjustedGrossIncome @bind-Value:event=oninput /> (Wages, salaries, tips + other income = gross income - adjustments to income = AGI)
                            <br/>
                        </div>
                    }
                </EditForm>
                @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {

                    <br/>
                    <p ><b>Prioritized Steps:</b></p>

                    <p><b>Press edit (✏️) to complete each step:</b></p>
                    <table>
                        @foreach (var step in steps) {
                            var href = folderName + @step.step;
                            if (!pastTotal) {
                                pastTotal = familyData!.PlannedSavings <= runningTotal;

                                if (pastTotal) {
                                    <tr><td colspan=3>
                                        <hr/>
                                        <div>Planned savings @(familyData.PlannedSavings==runningTotal?"met":"exceeded") after @FormatUtilities.FormatMoney(itemTotal+1*(familyData.PlannedSavings-runningTotal)) towards Step @(step.number-1)</div>
                                        <hr/>    
                                    </td></tr>
                                }
                            }
                            itemTotal = 0;

                            <tr>
                                <td style=text-align:right>
                                    @step.number
                                </td>
                                <td>
                                    <a href="@href" style="background:blue" class="m-1 btn" >✏️</a>
                                </td>
                                @switch (step.step) {
                                    case "benefit-entry":
                                        bool titleShown4 = false;
                                        <td>
                                            @if (familyData.PersonCount > 0) {
                                                Person person = familyData!.People[0];
                                                EmployerBenefits employerBenefits = person!.EmployerBenefits;
                                                if (employerBenefits is not null) {
                                                    if (employerBenefits.Complete && employerBenefits.Company != null) {
                                                        if (employerBenefits.Downloaded) {
                                                            <span>Found @employerBenefits.Company benefit details</span><br/>
                                                        } else {
                                                            <span>Entered @employerBenefits.Company benefit details</span><br/>
                                                        }
                                                    } else if (familyData.People[0].EmployerPlan.AnnualSalary != 0) {
                                                        titleShown4 = true;
                                                        <div>
                                                            <b>@step.title</b>@if(employerBenefits.Company != null) { <span>: @employerBenefits.Company</span> }
                                                        </div>
                                                    }
                                                }
                                            }
                                            @if (familyData.PersonCount > 1) {
                                                Person person = familyData!.People[1];
                                                EmployerBenefits employerBenefits = person!.EmployerBenefits;
                                                if (employerBenefits is not null) {
                                                    if (employerBenefits.Complete && employerBenefits.Company != null) {
                                                        if (employerBenefits.Downloaded) {
                                                            <span>Found @employerBenefits.Company benefit details</span><br/>
                                                        } else {
                                                            <span>Entered @employerBenefits.Company benefit details</span><br/>
                                                        }
                                                    } else if (person.EmployerPlan.AnnualSalary != 0 && !titleShown4) {
                                                        <div>
                                                            <b>@step.title</b>@if(employerBenefits.Company != null) { <span>: @employerBenefits.Company</span> }
                                                        </div>
                                                    }
                                                }
                                            }
                                        </td>
                                        break;
                                    case "emergency-fund": 
                                        <td>
                                            @if (familyData.EmergencyFund.AmountToSave != null) {
                                                runningTotal += addItem(familyData.EmergencyFund.AmountToSave);
                                                itemTotal += addItem(familyData.EmergencyFund.AmountToSave);
                                                <span>@FormatUtilities.FormatMoney(familyData.EmergencyFund.AmountToSave) in Emergency Fund</span><br/>
                                            } else {
                                                <b>@step.title</b>
                                            }
                                        </td>
                                    break;
                                    case "retirement-funds-match":
                                        <td>
                                            @if (familyData.PersonCount > 0) {
                                                if (familyData.People[0].EmployerPlan.AmountToSaveForMatch > 0 && familyData.People[0].EmployerBenefits.Employer401k.Offered == TriState.True) {
                                                    runningTotal += addItem(familyData.People[0].EmployerPlan.AmountToSaveForMatch);
                                                    itemTotal += addItem(familyData.People[0].EmployerPlan.AmountToSaveForMatch);
                                                    <span>@FormatUtilities.FormatMoney(familyData.People[0].EmployerPlan.AmountToSaveForMatch) in @familyData.People[0].PossessiveID 401(k)</span>
                                                    @if (familyData.People[0].EmployerPlan.MatchAmount == null) {
                                                        <br/> <b>Match amount?</b><br/>
                                                    } else { 
                                                        <span>&nbsp;(Match: @FormatUtilities.FormatMoney(familyData.People[0].EmployerPlan.MatchAmount))</span><br/>
                                                    }
                                                } else if (familyData.People[0].EmployerBenefits.Employer401k.Offered == TriState.False) {
                                                    <div><del>@familyData.People[0].PossessiveID @step.title</del></div>
                                                } else if (familyData.People[0].EmployerPlan.AnnualSalary != 0) {
                                                    <div><b>@familyData.People[0].PossessiveID @step.title</b></div>
                                                } else if (familyData.People[0].EmployerPlan.AnnualSalary == 0) {
                                                    <div><del>@familyData.People[0].PossessiveID @step.title</del></div>
                                                }
                                            }
                                            @if (familyData.PersonCount > 1) {
                                                if (familyData.People[1].EmployerPlan.AmountToSaveForMatch > 0 && familyData.People[1].EmployerBenefits.Employer401k.Offered == TriState.True) {
                                                    runningTotal += addItem(familyData.People[1].EmployerPlan.AmountToSaveForMatch);
                                                    itemTotal += addItem(familyData.People[1].EmployerPlan.AmountToSaveForMatch);
                                                    <span>@FormatUtilities.FormatMoney(familyData.People[1].EmployerPlan.AmountToSaveForMatch) in @familyData.People[1].PossessiveID 401(k)</span>
                                                    @if (familyData.People[1].EmployerPlan.MatchAmount == null) {
                                                        <br/> <b>Match amount?</b><br/>
                                                    } else { 
                                                        <span>&nbsp;(Match: @FormatUtilities.FormatMoney(familyData.People[1].EmployerPlan.MatchAmount))</span><br/>
                                                    }
                                                } else if (familyData.People[1].EmployerBenefits.Employer401k.Offered == TriState.False) {
                                                
                                                } else if (familyData.People[1].EmployerPlan.AnnualSalary != 0) {
                                                    <div><b>@familyData.People[1].PossessiveID @step.title</b></div>
                                                } else if (familyData.People[1].EmployerPlan.AnnualSalary == 0) {
                                                    <div><del>@familyData.People[1].PossessiveID @step.title</del></div>
                                                }
                                            }
                                        </td>
                                    break;
                                    case "high-interest-debt":
                                        <td>
                                            @if (familyData.Debts.Count > 0 || familyData.DebtsComplete) {
                                                runningTotal += addItem(familyData.HighDebts);
                                                itemTotal += addItem(familyData.HighDebts);
                                                <span>@FormatUtilities.FormatMoney(familyData.HighDebts>0?familyData.HighDebts:0) in High-Interest Debts</span><br/>
                                            } else {
                                                <b>@step.title</b>
                                            }
                                        </td>
                                        break;
                                    case "hsa":
                                        <td>
                                            @if (familyData.PersonCount > 0) {
                                                if ((familyData.People[0].EmployerBenefits.Complete || familyData.People[0].EmployerPlan.AnnualSalary == 0 || familyData.People[0].HealthSavingsAccount.EligibleForHSA || familyData.People[0].HealthSavingsAccount.EligibleForHSACatchUpOnly) && familyData.People[0].HealthSavingsAccount.AmountToSave > 0) {
                                                    runningTotal += addItem(familyData.People[0].HealthSavingsAccount.AmountToSave);
                                                    itemTotal += addItem(familyData.People[0].HealthSavingsAccount.AmountToSave);
                                                    <span>@FormatUtilities.FormatMoney(familyData.People[0].HealthSavingsAccount.AmountToSave) in @familyData.People[0].PossessiveID HSA (Employer: @FormatUtilities.FormatMoney(familyData.People[0].HealthSavingsAccount.EmployerContribution))</span><br/>
                                                } else if (familyData.People[0].EmployerBenefits.HSA.HighDeductibleHealthPlanAvailable == TriState.False) {
                                                    <div><del>@familyData.People[0].PossessiveID @step.title</del></div>
                                                } else {
                                                    <div><b>@familyData.People[0].PossessiveID @step.title</b></div>
                                                }
                                            }
                                            @if (familyData.PersonCount > 1) {
                                                if ((familyData.People[1].EmployerBenefits.Complete || familyData.People[1].EmployerPlan.AnnualSalary == 0 || familyData.People[1].HealthSavingsAccount.EligibleForHSA  || familyData.People[1].HealthSavingsAccount.EligibleForHSACatchUpOnly) && familyData.People[1].HealthSavingsAccount.AmountToSave > 0) {
                                                    runningTotal += addItem(familyData.People[1].HealthSavingsAccount.AmountToSave);
                                                    itemTotal += addItem(familyData.People[1].HealthSavingsAccount.AmountToSave);
                                                    <span>@FormatUtilities.FormatMoney(familyData.People[1].HealthSavingsAccount.AmountToSave) in @familyData.People[1].PossessiveID HSA (Employer: @FormatUtilities.FormatMoney(familyData.People[1].HealthSavingsAccount.EmployerContribution))</span><br/>
                                                } else if (familyData.People[1].EmployerBenefits.HSA.HighDeductibleHealthPlanAvailable == TriState.False) {
                                                    <div><del>@familyData.People[1].PossessiveID @step.title</del></div>
                                                } else {
                                                    <div><b>@familyData.People[1].PossessiveID @step.title</b></div>
                                                }
                                            }
                                        </td>
                                    break;
                                    case "ira-or-roth-ira":
                                        <td>
                                            @if (familyData.AdjustedGrossIncome != null) {
                                                if (familyData.PersonCount > 0) {
                                                    runningTotal += addItem(GetRecommdedIRAAmount(familyData.People[0]));
                                                    itemTotal += addItem(GetRecommdedIRAAmount(familyData.People[0]));
                                                    <span>@((MarkupString)GetRecommendedIRAMarkup(familyData.People[0]))</span><br/>
                                                }
                                                if(familyData.PersonCount > 1) {
                                                    runningTotal += addItem(GetRecommdedIRAAmount(familyData.People[0]));
                                                    itemTotal += addItem(GetRecommdedIRAAmount(familyData.People[0]));
                                                    <span>@((MarkupString)GetRecommendedIRAMarkup(familyData.People[1]))</span><br/>
                                                }
                                            } else {
                                                <b>@step.title</b>
                                            }
                                        </td>
                                        break;
                                    case "employer-retirement-funds": 
                                        <td>
                                            @if (familyData.PersonCount > 0) {
                                                if (familyData.People[0].EmployerBenefits.Employer401k.Offered == TriState.True && 
                                                    familyData.People[0].EmployerPlan.AmountToSaveForNonMatched != null
                                                    && familyData.People[0].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                                    runningTotal += addItem(familyData.People[0].EmployerPlan.AmountToSaveForNonMatched);
                                                    itemTotal += addItem(familyData.People[0].EmployerPlan.AmountToSaveForNonMatched);
                                                    <span>@FormatUtilities.FormatMoney(familyData.People[0].EmployerPlan.AmountToSaveForNonMatched) in @familyData.People[0].PossessiveID 401(k)</span><br/>
                                                } else if (familyData.People[0].EmployerBenefits.Employer401k.Offered == TriState.False) {
                                                    <div><del>@familyData.People[0].PossessiveID @step.title</del></div>
                                                } else if (familyData.People[0].EmployerPlan.AnnualSalary != 0) {
                                                    <b>@familyData.People[0].PossessiveID @step.title</b><br/>
                                                } else if (familyData.People[0].EmployerPlan.AnnualSalary == 0) {
                                                    <del>@familyData.People[0].PossessiveID @step.title</del><br/>
                                                }
                                            }
                                            @if (familyData.PersonCount > 1) {
                                                if (familyData.People[1].EmployerBenefits.Employer401k.Offered == TriState.True && 
                                                    familyData.People[1].EmployerPlan.AmountToSaveForNonMatched != null
                                                    && familyData.People[1].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                                    runningTotal += addItem(familyData.People[1].EmployerPlan.AmountToSaveForNonMatched);
                                                    itemTotal += addItem(familyData.People[1].EmployerPlan.AmountToSaveForNonMatched);
                                                    <span>@FormatUtilities.FormatMoney(familyData.People[1].EmployerPlan.AmountToSaveForNonMatched) in @familyData.People[1].PossessiveID 401(k)</span><br/>
                                                } else if (familyData.People[1].EmployerBenefits.Employer401k.Offered == TriState.False) {
                                                    <div><del>@familyData.People[1].PossessiveID @step.title</del></div>
                                                } else if (familyData.People[1].EmployerPlan.AnnualSalary != 0) {
                                                    <b>@familyData.People[1].PossessiveID @step.title</b>
                                                } else if (familyData.People[1].EmployerPlan.AnnualSalary == 0) {
                                                    <del>@familyData.People[1].PossessiveID @step.title</del>
                                                }
                                            }
                                        </td>
                                        
                                        break;
                                    case "mega-backdoor-roth": 
                                        <td>
                                            @if (familyData.PersonCount > 0) {
                                                if (familyData.People[0].EmployerBenefits.Employer401k.Offered == TriState.True && familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit > 0) {
                                                    runningTotal += addItem(familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit);
                                                    itemTotal += addItem(familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit);
                                                    <span>@FormatUtilities.FormatMoney(familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit) in @familyData.People[0].PossessiveID mega backdoor roth</span><br/>
                                                } else if (familyData.People[0].EmployerBenefits.Employer401k.Offered == TriState.False) {
                                                    <div><del>@familyData.People[0].PossessiveID @step.title</del></div>
                                                } else if (familyData.People[0].EmployerPlan.AnnualSalary != 0) {
                                                    <b>@familyData.People[0].PossessiveID @step.title</b><br/>
                                                } else if (familyData.People[0].EmployerPlan.AnnualSalary == 0) {
                                                    <del>@familyData.People[0].PossessiveID @step.title</del><br/>
                                                }
                                            }
                                            @if (familyData.PersonCount > 1) {
                                                if (familyData.People[1].EmployerBenefits.Employer401k.Offered == TriState.True && familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit > 0) {
                                                    runningTotal += addItem(familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit);
                                                    itemTotal += addItem(familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit);
                                                    <span>@FormatUtilities.FormatMoney(familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit) in @familyData.People[1].PossessiveID mega backdoor roth</span><br/>
                                                } else if (familyData.People[1].EmployerBenefits.Employer401k.Offered == TriState.False) {
                                                    <div><del>@familyData.People[1].PossessiveID @step.title</del></div>
                                                } else if (familyData.People[1].EmployerPlan.AnnualSalary != 0) {
                                                    <b>@familyData.People[1].PossessiveID @step.title</b><br/>
                                                } else if (familyData.People[1].EmployerPlan.AnnualSalary == 0) {
                                                    <del>@familyData.People[1].PossessiveID @step.title</del><br/>
                                                }
                                            }
                                        </td>
                                    break;
                                    case "medium-interest-debt":
                                        <td>
                                            @if (familyData.Debts.Count > 0 || familyData.DebtsComplete) {
                                                runningTotal += addItem(familyData.MediumDebts);
                                                itemTotal += addItem(familyData.MediumDebts);
                                                <span>@FormatUtilities.FormatMoney(familyData.MediumDebts>0?familyData.MediumDebts:0) in Medium-Interest Debts</span><br/>
                                            } else {
                                                <b>@step.title</b>
                                            }
                                        </td>
                                        break;
                                    case "taxable-accounts":
                                        if (familyData.PlannedSavings > runningTotal) {
                                            itemTotal += addItem(familyData.PlannedSavings-runningTotal);
                                            runningTotal += addItem(itemTotal);
                                        }
                                        <td>
                                            @FormatUtilities.FormatMoney(itemTotal) in Taxable
                                        </td>
                                        break;                                                                   
                                    case "low-interest-debt":
                                        <td>
                                            @if (familyData.Debts.Count > 0 || familyData.DebtsComplete) {
                                                runningTotal += addItem(familyData.LowDebts);
                                                itemTotal += addItem(familyData.LowDebts);
                                                <span>@FormatUtilities.FormatMoney(familyData.LowDebts>0?familyData.LowDebts:0) in Low-Interest Debts</span><br/>
                                            } else {
                                                <b>@step.title</b>
                                            }
                                        </td>
                                        break;
                                    default:
                                        <td style=text-align:center>NYI</td><td></td>
                                        break;
                                }
                            </tr>
                        }
                    </table>
                }
            </div>
            
            @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>

                <p>"Consider using the <a href="/portfolio-tracker">Portfolio Tracker</a> or getting a <a href="/portfolio-review">Portfolio Review</a>!"</p>
            }
        }
        else if (stepPath == "tax-filing-info") {

        }
        else
        {
            foreach (var step in steps) {
                if (step.step == stepPath) {
                    var firstStepIndex = 0;
                    var lastStepIndex = steps.Length-1;
                    var prevStep = step.number - 1 >= firstStepIndex ? steps[step.number - 1] : null;
                    var nextStep = step.number + 1 <= lastStepIndex ? steps[step.number + 1] : null;
                    string prevPage = folderName + prevStep?.step;
                    string nextPage = folderName + nextStep?.step;

                    <div style=float:left>
                        <h4 style="max-width:450px">
                            <NavLink href=@pagePath>@pageHeading</NavLink> <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
                        </h4>
                    </div>
                    <div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

                    <div style=clear:left>
                        <h4>@step.title (@step.number)</h4>
                        <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
                        <hr/>
                    </div>
                    
                    <h4 style=clear:left>@((MarkupString)FormatUtilities.Markupize(step.priority))</h4>

                    <p class="article"><b>Summary:</b> @((MarkupString)FormatUtilities.Markupize(step.summary))</p>
                        @switch (step.number) {
                            case 0:
                                <ol>
                                    <li>Look up your company benefits, asking for clarification as needed from your Benefits experts in HR.</li>
                                    <li>Fill out the form above as appropriate based on those benefits.</li>
                                    <li>Consider sharing your work by others. See: Make It Downloadable for others, at the bottom of this page.</li>
                                </ol>
                                @for (int i = 0; i < familyData.PersonCount; i++) {
                                    var person = familyData.People[i];
                                    var personBuffer = i;
                                    var eligibleId = "eligible-" + i;
                                    var haveHDHPid = "eligible-" + i;
                                    <p><b>Person @(i+1):</b> </p>

                                    <label>Employer:</label> <input type=text @bind-Value=person.EmployerBenefits.Company @bind-Value:event=oninput /><br/>
                                    <br/>
                                    @if (person.EmployerBenefits.Downloaded) { 
                                        <span>Found @familyData.People[personBuffer].EmployerBenefits.Company benefit details</span><br/><br/>
                                    } else {
                                        <span>Lookup and Enter @familyData.People[personBuffer].EmployerBenefits.Company benefit details:</span><br/><br/>
                                    }

                                    <p>Workplace retirement savings:</p>
                                    <EditForm Model="person" style=margin-left:25px>
                                        <label style="display:inline" for=@eligibleId>Offers workplace retirement savings</label> <InputSelect @bind-Value=person.EmployerBenefits.Employer401k.Offered id=@eligibleId>
                                        @foreach (var option in Enum.GetValues<TriState>()) {
                                            <option value="@option">@option</option>
                                        }
                                        </InputSelect><br/>
                                            <br/>
                                        <fieldset disabled=@person.EmployerPlan.NotEligible style='margin-left:20px'>
                                            <label>Matching Levels:</label><br/>
                                            @for (var m = 0; m < person.EmployerBenefits.Employer401k.MatchRules.Count; m++) 
                                            {
                                                var matchRuleBuffer = m;
                                                <div>
                                                    <button @onclick='@(e=>deleteMatchRule(e,personBuffer,matchRuleBuffer))'>❌</button>&nbsp;
                                                    <label>Match:</label> <input type=text class=percent @bind-Value=person.EmployerBenefits.Employer401k.MatchRules[matchRuleBuffer].MatchPercentage @bind-Value:event=oninput />%
                                                    <label margin-left:30px>for next</label> <input style="width:30px" type=text class=percent @bind-Value=person.EmployerBenefits.Employer401k.MatchRules[matchRuleBuffer].ForNextPercent @bind-Value:event=oninput/>%
                                                </div>
                                            }

                                            <br/>
                                            <button @onclick='@(e=>addMatchRule(e,personBuffer))'>➕</button><br/><br/><br/>
                                            <label>Max Match:</label> $<input type=text class=dollar @bind-Value=person.EmployerBenefits.Employer401k.MatchLimit @bind-Value:event=oninput/><br/><br/>
                                            <label>Post Tax "Mega Backdoor Roth" Contribution Allowed:</label> <span>$</span><input type=text class=dollar @bind-Value=person.EmployerBenefits.MegaBackdoorRoth.ContributionLimit @bind-Value:event=oninput/><br/>
                                        </fieldset>
                                    </EditForm><br/>
                                    <hr/>
                                    <p>HSA:</p>
                                    <EditForm Model="person" style=margin-left:25px>
                                        <label style="display:inline" for=@haveHDHPid>Offers high deductible health plan</label> <InputSelect @bind-Value=person.EmployerBenefits.HSA.HighDeductibleHealthPlanAvailable id=@haveHDHPid>
                                        @foreach (var option in Enum.GetValues<TriState>()) {
                                            <option value="@option">@option</option>
                                        }
                                        </InputSelect><br/>                                                
                                        <fieldset disabled=@(person.EmployerBenefits.HSA.HighDeductibleHealthPlanAvailable!=TriState.True) style='margin-left:20px'>
                                            <label>Employer Contribution Levels:</label>
                                            @{contributionIndex = 0;}
                                            @foreach(var employerContributionLevel in person.EmployerBenefits.HSA.EmployerContributionLevels)
                                            {
                                                var contributionLevelBuffer = contributionIndex;
                                                contributionIndex++;
                                                <div>
                                                    <button @onclick='@(e=>deleteContributionLevel(e,personBuffer,contributionLevelBuffer))'>❌</button>&nbsp;
                                                    <label>Description:</label> <input type=text class=dollar @bind-Value=employerContributionLevel.Description @bind-Value:event=oninput/>&nbsp;
                                                    <label>Amount:</label> <input type=text class=dollar @bind-Value=employerContributionLevel.Amount @bind-Value:event=oninput/><br/>
                                                </div>
                                            }

                                            <br/>
                                            <button @onclick='@(e=>addContributionLevel(e,personBuffer))'>➕</button><br/><br/>
                                        </fieldset>
                                        <br/>
                                    </EditForm>
                                    <br/>

                                    @code{
                                        private void addContributionLevel(MouseEventArgs e, int personIndex)
                                        {
                                            var contributionLevel = new EmployerContributionLevel();
                                            familyData!.People[personIndex].EmployerBenefits.HSA.EmployerContributionLevels.Add(contributionLevel);
                                        }
                                        private void deleteContributionLevel(MouseEventArgs e, int personIndex, int contributionLevelIndex)
                                        {
                                            familyData!.People[personIndex].EmployerBenefits.HSA.EmployerContributionLevels.RemoveAt(contributionLevelIndex);
                                        }
                                        private async Task DownloadEmployer1() {
                                            await DownloadEmployer(0);
                                        }
                                        private async Task DownloadEmployer2() {
                                            await DownloadEmployer(1);
                                        }
                                        private async Task DownloadEmployer(int index) {
                                            if (appData.FamilyData is not null) {
                                                var options = new JsonSerializerOptions() 
                                                {
                                                    DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,
                                                    WriteIndented = true,
                                                    Converters =
                                                        {
                                                            new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                                                        }
                                                };
                                                await DownloadFileFromStream(appData.FamilyData.People[index].EmployerBenefits, options, appData.FamilyData.People[index].EmployerBenefits.Company + "-benefits.json");
                                            }
                                        }
                                        private async Task DownloadFileFromStream(object data, JsonSerializerOptions options, string fileName)
                                        {
                                            var jsonOut = System.Text.Json.JsonSerializer.Serialize(data, options);

                                            using (MemoryStream ms = new MemoryStream(System.Text.Encoding.ASCII.GetBytes(jsonOut)))
                                            {
                                                using var streamRef = new DotNetStreamReference(stream: ms);
                                                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
                                            }
                                        }                                        
                                    }
                                }
                                <hr/>
                                <h2>Make it Downloadable by Others</h2>
                                <h4>Once complete and correct, share this Employer U.S. Employee Benefit Data</h4>
                                <div>We'd like to collect many companies benefit files and publish them for other users of this Annual SAVINGS tool to have automatically used.</div>
                                <ol>
                                    <li>Press 'Download &lt;EmployerName&gt; benefits file'</li>
                                    <li>Send file to suggestions@multifol.io -- we'll review and publish to github.com so that Savings Planner can make it easier to use for other employees by <a target=_blank href=https://github.com/multifol-io/financial-variables/blob/main/data/usa/employers/microsoft/microsoft.retirement.2023.json>posting on github.com</a></li>
                                </ol>
                                <br/>
                                @if (familyData.PersonCount > 0) {
                                    <button @onclick="DownloadEmployer1">
                                    Download @familyData.People[0].EmployerBenefits.Company benefits file
                                    </button> <span>to your device</span>
                                    <br/>
                                }

                                @if (familyData.PersonCount > 1) {
                                    <button @onclick="DownloadEmployer2">
                                    Download @familyData.People[1].EmployerBenefits.Company benefits file
                                    </button> <span>to your device</span>
                                }
                                <br/>
                                break;
                            case 1:
                                <p ><b>Prerequisities:</b></p>
                                <label>Target Year:</label> <select @bind=familyData.Year><option>2023</option><option>2024</option></select><br/>
                                <br />

                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Current Emergency Fund:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.EmergencyFund.CurrentBalance" @bind-Value:event="oninput"/><br/><br/>
                                    <label>➗ Monthly Expenses:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/><br/>
                                    <hr style=width:300px />
                                    <div style=text-align:right;width:275px>@familyData.EmergencyFund.CurrentMonthsString months</div>
                                    <br/>

                                    <label>Target Months:</label>
                                    <input type=text class=dollar @bind-Value="familyData.EmergencyFund.TargetMonths" @bind-Value:event="oninput" /><br/>
                                    
                                    @if(familyData.EmergencyFund.CurrentMonths == null && familyData.EmergencyFund.CurrentBalance != null) {
                                        <br/><br/>
                                        <InputCheckbox id=ShowDollars @bind-Value=familyData.EmergencyFund.ShowDollars /> <label for=ShowDollars>Only publish amount, since I haven't yet estimated monthly expenses</label><br/>
                                        <span>(Months is MORE useful than a dollar amount.)</span>
                                    }
                                </EditForm><br/>
                                break;
                            case 2:
                                <p><b>Prerequisities:</b> </p>
                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyData.Year><option>2023</option><option>2024</option></select><br/>

                                    <label>Tax Filing Status:</label> <select @bind=familyData.TaxFilingStatus>
                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing separately</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                        </select><br/>
                                </EditForm><br/>
                                @for (int i = 0; i < familyData.PersonCount; i++) {
                                    var person = familyData.People[i];
                                    if (person is not null) {
                                        var personBuffer = i;
                                        var eligibleId = "eligible-" + i;
                                        matchRuleIndex = 0;
                                        <p><b>Person @(i+1):</b> </p>

                                        <EditForm Model="person" style=margin-left:25px>
                                            <label>Employer:</label> <input type=text @bind-Value=person.EmployerBenefits.Company @bind-Value:event=oninput /><br/>
                                            <label>Annual Salary:</label> $<input type=text class=dollar @bind-Value=person.EmployerPlan.AnnualSalary @bind-Value:event=oninput /><br/>
                                            <br/>
                                        <fieldset disabled=@person.EmployerBenefits.Employer401k.Offered!=TriState.True style='margin-left:20px'>
                                                <label>Matching Levels:</label><br/>
                                                @foreach (var matchRule in person.EmployerBenefits.Employer401k.MatchRules)
                                                {
                                                    var matchRuleBuffer = matchRuleIndex;
                                                    matchRuleIndex++;
                                                    <div>
                                                        <label>Match:</label> <span>@FormatUtilities.FormatPercent(person.EmployerBenefits.Employer401k.MatchRules[matchRuleBuffer].MatchPercentage)</span><br/>
                                                        <label margin-left:30px>for next</label> <span>@FormatUtilities.FormatPercent(person.EmployerBenefits.Employer401k.MatchRules[matchRuleBuffer].ForNextPercent)</span><br/>
                                                    </div>
                                                }
                                                <br/>
                                                <label>Max Match:</label> <span>@FormatUtilities.FormatMoney(person.EmployerBenefits.Employer401k.MatchLimit)</span><br/>
                                                <label>Contribution required to get maximum match:</label> <span>@FormatUtilities.FormatMoney(person.EmployerPlan.AmountToSaveForMatch)</span><br/>
                                                <label>Match Amount:</label> <span>@FormatUtilities.FormatMoney(person.EmployerPlan.MatchAmount)</span><br/>
                                            </fieldset>
                                        </EditForm><br/>
                                    }
                                }
                                @code{
                                    private void addMatchRule(MouseEventArgs e, int personIndex)
                                    {
                                        if (appData.FamilyData is not null) {
                                            var matchRule = new MatchRule();
                                            appData.FamilyData.People[personIndex].EmployerBenefits.Employer401k.MatchRules.Add(matchRule);
                                        }
                                    }
                                    private void deleteMatchRule(MouseEventArgs e, int personIndex, int matchIndex)
                                    {
                                        if (appData.FamilyData is not null) {
                                            appData.FamilyData.People[personIndex].EmployerBenefits.Employer401k.MatchRules.RemoveAt(matchIndex);
                                        }
                                    }
                                }
                                break;
                            case 4:
                                <p><b>Prerequisities:</b> </p>
                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyData.Year><option>2023</option><option>2024</option></select><br/>
                                    
                                    <label>Tax Filing Status:</label> <select @bind=familyData.TaxFilingStatus>
                                                <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                <option>Single</option>
                                                <option value=MarriedFilingJointly>Married filing jointly</option>
                                                <option value=MarriedFilingSeperately>Married filing separately</option>
                                                <option value=HeadOfHousehold>Head of Household</option>
                                                </select><br/>
                                </EditForm><br/>
                                @for (int i = 0; i < familyData.PersonCount; i++) {
                                    var person = familyData.People[i];
                                    var haveHDHPid = "eligible-" + i;
                                    var haveHDHPOutsideid = "eligibleOutside-" + i;
                                    var haveHDHPEmployerid = "eligibleEmployer-" + i;
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <p>Employer based HDHP:</p>
                                        <fieldset style='margin-left:20px'>
                                        @if (person.EmployerBenefits.HSA.HighDeductibleHealthPlanAvailable == TriState.True) {
        
                                                
                                                <p>Has High Deductible Health Plan (HDHP) available from employer, according to <a href="/savings-planner/benefit-entry">entered benefits</a>.</p>

                                                <InputCheckbox id=@haveHDHPEmployerid @bind-Value=person.HealthSavingsAccount.HasEmployerHDHP /> <label for=@haveHDHPEmployerid>Has High-Deductible Health Plan from Employer</label><br/><br/>
                                                <label>Employer Contribution Levels:</label>
                                                <select @bind=person.HealthSavingsAccount.EmployerContributionString><option>ChoiceNeeded</option>
                                                @foreach(var employerContributionLevel in person.EmployerBenefits.HSA.EmployerContributionLevels)
                                                {
                                                    var employerLevelBuffer = employerContributionLevel;
                                                    <option value=@employerLevelBuffer.Amount>@(employerLevelBuffer.Description == null?"":@employerLevelBuffer.Description + ": ") @FormatUtilities.FormatMoney(employerLevelBuffer.Amount)</option>
                                                }
                                                </select>
                                        } else {
                                            <span>No High Deductible Health Plan is available at employer, according to <a href="/savings-planner/benefit-entry">entered benefits</a>.</span><br/><br/>
                                        }
                                        </fieldset>

                                        <p>HDHP (not employer based):</p>
                                        <fieldset style='margin-left:20px'>
                                            <InputCheckbox id=@haveHDHPOutsideid @bind-Value=person.HealthSavingsAccount.HasExternalHDHP /> <label for=@haveHDHPOutsideid>Has High Deductible Health Plan outside of Employer</label><br/><br/>
                                        </fieldset>
                                
                                        <p>HSA Election:</p>
                                        <fieldset disabled=@(!person.HealthSavingsAccount.EligibleForHSA && !person.HealthSavingsAccount.EligibleForHSACatchUpOnly) style='margin-left:20px'>
                                            <label>HSA Level:</label>   
                                            <select @bind=person.HealthSavingsAccount.Family>
                                            @if (person.HealthSavingsAccount.EligibleForHSA || person.HealthSavingsAccount.EligibleForHSACatchUpOnly){<option value="ChoiceNeeded">ChoiceNeeded</option>}
                                            else{<option value="NotEligible">Not Eligible based on choices above</option>}
                                            @if(person.HealthSavingsAccount.EligibleForHSA){<option>Individual</option><option>Family</option>}
                                            @if(person.HealthSavingsAccount.EligibleForHSACatchUpOnly){<option value=CatchUp>Catch up only</option>}
                                            </select><br/>
                                            <br/>
                                            <label>Contribution Limit:</label> @FormatUtilities.FormatMoney(person.HealthSavingsAccount.Limit)<br/>
                                        </fieldset>
                                        <br/>
                                        <label>Eligible for Catchup Contributions (55 or older):</label> @yesno(person.FiftyFiveOrOver)<br/><br/>
                                        <hr/>
                                        <label>Amount to Save:</label> @FormatUtilities.FormatMoney(person.HealthSavingsAccount.AmountToSave)<br/>
                                    </EditForm><br/>
                                }

                                break;
                            case 5:
                                <p><b>Prerequisities:</b> </p>
                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyData.Year><option>2023</option><option>2024</option></select><br/>

                                    <label>Tax Filing Status:</label> <select @bind=familyData.TaxFilingStatus>
                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing separately</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                        </select><br/>
                                    @if(familyData.TaxFilingStatus == TaxFilingStatus.MarriedFilingSeperately) {
                                        <InputCheckbox style=margin-left:25px id=livingSep @bind-Value=familyData.TaxFilingStatusLivingSeperately /> <label for=livingSep>Living separately</label><br/>
                                    }
                                    <label>@familyData.Year Adjusted Gross Income:</label> $<input type=text class=dollar @bind-Value=familyData.AdjustedGrossIncome @bind-Value:event=oninput /><br/>
                                </EditForm><br/>

                                if (familyData.AdjustedGrossIncome != null) {
                                    @for (int i = 0; i < familyData.PersonCount; i++) {
                                        var person = familyData.People[i];
                                        var eligibleId = "eligible-" + i;
                                        var over50id = "over50-" + i;
                                        var existingIRABalance = "existingIRABalance-" + i;
                                        var tId = "traditional-" + i;
                                        var rId = "roth-" + i;
                                        <p><b>Person @(i+1):</b> </p>

                                        <EditForm Model="person" style=margin-left:25px>
                                            <label style="display:inline" for=@eligibleId>Offers workplace retirement savings</label> <InputSelect @bind-Value=person.EmployerBenefits.Employer401k.Offered id=@eligibleId>
                                            @foreach (var option in Enum.GetValues<TriState>()) {
                                                <option value="@option">@option</option>
                                            }
                                            </InputSelect><br/>

                                            <label>Eligible for Catchup Contributions (50 or older):</label> @yesno(person.FiftyOrOver)<br/><br/>
                                            <InputCheckbox id=@existingIRABalance @bind-Value=person.IRA.HasExistingBalance /> <label for=@existingIRABalance>Has IRA with > $0</label><br/><br/>

                                            <label><i>Recommended Option:</i></label><br/>
                                            @switch(@person.IRATypeRecommendation) {
                                                case IRAType.DeductibleIRAThenBackdoorRoth:
                                                    <label for=@tId>- Contribute to IRA: $<span>@person.IRA.AmountToSave</span> <span>($@person.IRA.DeductionAllowed Tax Deductible)</span><br/></label><br/>
                                                    <span>- then carefully evaluate <a href="https://www.bogleheads.org/wiki/Backdoor_Roth_IRA" target=_blank>backdoor roth</a> process and do if appropriate (IRA $ -> Roth $)</span><br/><br/>
                                                    break;
                                                case IRAType.DeductibleIRA:
                                                    <label for=@tId>- Contribute to IRA: $<span>@person.IRA.AmountToSave</span> <span>($@person.IRA.DeductionAllowed Tax Deductible)</span><br/></label><br/>
                                                    <span>- if IRA balance was 0 before the contribution, could carefully evaluate <a href="https://www.bogleheads.org/wiki/Backdoor_Roth_IRA" target=_blank>backdoor roth</a> process and do if appropriate (IRA $ -> Roth $)</span><br/><br/>
                                                    break;
                                                case IRAType.Roth:
                                                    <label for=@rId>- Contribute to Roth IRA: $<span>@person.RothIRA.AmountToSave</span></label><br/>
                                                    break;
                                                case IRAType.NondeductibleIRAThenBackdoorRoth:
                                                    <label for=@tId>- Contribute to IRA: $<span>@person.IRA.AmountToSave</span> <span>($@person.IRA.DeductionAllowed Tax Deductible)</span><br/></label><br/>
                                                    <span>- then carefully evaluate <a href="https://www.bogleheads.org/wiki/Backdoor_Roth_IRA" target=_blank>backdoor roth</a> process and do if appropriate (IRA $ -> Roth $)</span><br/><br/>
                                                    break;
                                                case IRAType.NondeductibleIRA:
                                                    <label for=@tId>- Contribute to IRA: $<span>@person.IRA.AmountToSave</span> <span>($@person.IRA.DeductionAllowed Tax Deductible)</span><br/></label><br/>
                                                    <span>- if IRA balance was 0 before the contribution, could carefully evaluate <a href="https://www.bogleheads.org/wiki/Backdoor_Roth_IRA" target=_blank>backdoor roth</a> process and do if appropriate (IRA $ -> Roth $)</span><br/><br/>
                                                    break;
                                            }
                                        </EditForm><br/>
                                    }
                                }

                                break;
                            case 6:
                                <p><b>Prerequisities:</b> </p>

                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyData.Year><option>2023</option><option>2024</option></select><br/>

                                    <label>Tax Filing Status:</label> <select @bind=familyData.TaxFilingStatus>
                                                <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                <option>Single</option>
                                                <option value=MarriedFilingJointly>Married filing jointly</option>
                                                <option value=MarriedFilingSeperately>Married filing separately</option>
                                                <option value=HeadOfHousehold>Head of Household</option>
                                                </select><br/>

                                                @for (int i = 0; i < familyData.PersonCount; i++) {
                                                    var person = familyData.People[i];
                                                    <span>Person @(i+1):</span><br/>
                                                    <div style=margin-left:25px>
                                                        <label>Age:</label> <input style=width:60px type=number min=0 max=125 @bind-Value=person.Age @bind-Value:event=oninput /> (after birthday in @appData.FamilyData.Year)<br/>
                                                        <label>Employer:</label> <input style=width:200px type=text @bind-Value=person.EmployerBenefits.Company @bind-Value:event=oninput /><br/>
                                                    </div>
                                                }
                                </EditForm><br/>
                                @for (int i = 0; i < familyData.PersonCount; i++) {
                                    var person = familyData.People[i];
                                    var eligibleId = "eligible-" + i;
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <label>Eligible for Catchup Contributions (50 or older):</label> @person.FiftyOrOver<br/><br/>

                                        <label>@person.FamilyData.Year 401(k) Total Contribution Allowed:</label> $<span>@person.EmployerPlan.ContributionAllowed</span><br/>
                                        <label>minus Matched Contribution Allowed (step 2):</label> $<span>@person.EmployerPlan.AmountToSaveForMatch</span><br/>
                                        <label>Amount to Save (unmatched):</label> $<span>@person.EmployerPlan.AmountToSaveForNonMatched</span><br/>
                                    </EditForm><br/>
                                }
                                break;
                            case 7:
                                <p><b>Prerequisities:</b> </p>
                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyData.Year><option>2023</option><option>2024</option></select><br/>

                                    <label>Tax Filing Status:</label> <select @bind=familyData.TaxFilingStatus>
                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing separately</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                        </select><br/>
                                </EditForm><br/>

                                @for (int i = 0; i < familyData.PersonCount; i++) {
                                    var person = familyData.People[i];
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <label>Amount to Save:</label> <span>$</span><span>@person.EmployerBenefits.MegaBackdoorRoth.ContributionLimit</span><br/>
                                    </EditForm><br/>
                                }
                                break;
                            case 9:
                                <label style=margin-left:25px>Amount to Save:</label> <span>no limits</span><br/><br/>
                                break;
                            case 3:
                            case 8:
                            case 10:
                                <p><b>Worksheet:</b> </p>
                                <div>
                                    <i>list of debts (all interest rates):</i><br/><br/>

                                    @if (familyData.DebtFree == TriState.ChoiceNeeded || familyData.DebtFree == TriState.True) {
                                        <label style="display:inline" for=debtFree>Debt free:</label> <InputSelect @bind-Value=familyData.DebtFree id=debtFree>
                                        @foreach (var option in Enum.GetValues<TriState>()) {
                                            <option value="@option">@option</option>
                                        }
                                        </InputSelect><br/>
                                        <br/>
                                    }

                                    <EditForm Model="familyData">
                                        <table>
                                            <thead>
                                            <th></th>
                                            <th style="width:150px"><label>name</label></th>
                                            <th style="width:150px"><label>total $</label></th>
                                            <th style="width:100px"><label>interest %</label></th>
                                            <th>rate</th>
                                            </thead>
                                            @for (var i=0;i<familyData.Debts.Count;i++) {
                                                var debt = familyData.Debts[i];
                                                int debtBuffer = i;
                                                <tr>
                                                <td><button @onclick=@(e=>RemoveDebt(e, debtBuffer))>❌</button></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Name @bind-Value:event=oninput placeholder='description'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Total @bind-Value:event=oninput placeholder='amount owed'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Rate @bind-Value:event=oninput placeholder='rate'/></td>
                                                <td><span>@debt.Category</span></td>
                                                </tr>
                                            }
                                        </table>
                                        <br/>
                                        <button @onclick=addDebt>➕</button>

                                        <br/><br/>
                                        <label>Amount to Pay-Off (@step.title):</label> <span>$</span>
                                        @switch (step.number) {
                                            case 3:
                                                @familyData.HighDebts;
                                                break;
                                            case 8:
                                                @familyData.MediumDebts;
                                                break;
                                            case 10:
                                                @familyData.LowDebts;
                                                break;
                                            default:
                                                break;
                                        }
                                        <br/><br/>
                                    </EditForm>
                                </div>

                                @code{
                                    void RemoveDebt(MouseEventArgs e, int debtIndex) {
                                        var familyData = appData.FamilyData;
                                        if (familyData is not null) {
                                            familyData.Debts.RemoveAt(debtIndex);
                                            if (familyData.Debts.Count == 0) {
                                                familyData.DebtFree = TriState.ChoiceNeeded;
                                            }
                                        }
                                    }
                                    void addDebt()
                                    {
                                        var familyData = appData.FamilyData;
                                        if (familyData is not null) {
                                            familyData.Debts.Add(new Debt());
                                            familyData.DebtFree = TriState.False;
                                        }
                                    }
                                }
                            
                                break;
                        }
                    @if(step.returns != "N/A") {<p><b>Approximate Return:</b> @step.returns</p>}
                    @if(step.description != "") {<p class="article"><b>Details:</b> @((MarkupString)FormatUtilities.Markupize(step.description))</p>}

                    <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
                }
            }
        }
    }

@code {
    public enum Mode {
        normal = 0,
        href,
        text,
    }

    public int addItem(int? itemAmount) {
        return itemAmount ?? 0;
    }

    public int? GetRecommdedIRAAmount(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
            case IRAType.DeductibleIRA:
                return person.IRA.AmountToSave;
            case IRAType.Roth:
                return person.RothIRA.AmountToSave;
            case IRAType.NondeductibleIRAThenBackdoorRoth:
            case IRAType.NondeductibleIRA:
                return person.IRA.AmountToSave;
            default:
                return null;
        }
    }
    public string GetRecommendedIRAMarkup(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
                return "<span>" + FormatUtilities.FormatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + FormatUtilities.FormatMoney(person.IRA.DeductionAllowed) + " Deductible), then backdoor roth</span>";
            case IRAType.DeductibleIRA:
                return "<span>" + FormatUtilities.FormatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + FormatUtilities.FormatMoney(person.IRA.DeductionAllowed) + " Deductible)</span>";
            case IRAType.Roth:
                return "<span>" + FormatUtilities.FormatMoney(person.RothIRA.AmountToSave) + " in " + person.PossessiveID + " Roth IRA</span>";
            case IRAType.NondeductibleIRAThenBackdoorRoth:
                return "<span>" + FormatUtilities.FormatMoney(person.IRA.AmountToSave) + " (nondeductible), then backdoor roth</span>";
            case IRAType.NondeductibleIRA:
                return "<span>$" + FormatUtilities.FormatMoney(person.IRA.AmountToSave) + " (nondeductible)</span>";
            default:
                return "<p>do nothing</p>";
        }
    }

    private string yesno(bool yes) {
        return (yes ? "yes" : "no");
    }

    [Parameter]
    public string? stepPath { get; set; }

    private Step[]? steps;
    private bool pastTotal;
    private string?[] lastEmployer = { null, null };
    private const string pagePath = "/savings-planner";
    private const string folderName = pagePath + "/";
    private const string pageHeading = "Savings Planner";
    private int matchRuleIndex;
    private int contributionIndex;
    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/saving-steps.json");
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private FamilyData? familyData {
        get {
            return appData.FamilyData;
        }
        set {
            appData.FamilyData = value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (appData != null && familyData != null) {
            for (var i = 0; i < familyData.PersonCount; i++) {
                var benefits = familyData.People[i].EmployerBenefits;
                
                if (lastEmployer[i] != benefits.Company)
                {
                    await benefits.GetEmployerDataAsync(familyData.Year);
                    lastEmployer[i] = benefits.Company;
                    if (benefits.Downloaded) {
                        await InvokeAsync(StateHasChanged); 
                    }
                }
            }
        }
    }

    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

    async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }
}