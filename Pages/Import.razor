@page "/import"
@page "/import/{Custodian}"
@page "/import-accounts-bh"
@inject IAppData appData
@inject NavigationManager Navigation
@inject IProfileUtility ProfileUtilities
@inject IList<Fund> Funds
@inject HttpClient Http
@using Models

@if (Custodian == null)
{
        <PageTitle>@pageHeading</PageTitle>
}
else
{
        <PageTitle>Import from @Custodian</PageTitle>
}

<div style=float:left>
    <h4 style="max-width:450px">
        @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
    </h4>
</div>
<div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

<div style=clear:left>
    @if (appData.ImportResult == null)
    {
        @if (csvImport)
        {
            @if (showError)
            {
                <br/>

                <br/>

                <span style=color:red>ERROR: must be a CSV file from Ameriprise, eTrade, Fidelity, Merrill Edge, Schwab, T Rowe Price, or Vanguard or a XLSX file from Morgan Stanley.</span>

                <br/>
            }
                    <br/>

                    <p>As mentioned in <a href=/updating-portfolio>/updating-portfolio</a> there are 3 ways to enter/update data about your portolio. Importing CSV files is one of those techniques. Choose your account custodian:</p>

                    <div style=margin:.25in>
                        <b>Import account data:</b>
                        <span>&nbsp;<a href='/import/Fidelity'>Fidelity</a> | 
                        <a href='/import/Schwab'>Schwab</a> | 
                        <a href='/import/TreasuryDirect'>Treasury&nbsp;Direct</a> | 
                        <a href='/import/Vanguard'>Vanguard</a></span><br/>

                        <b>Other supported accounts:</b>
                        <span>&nbsp;<a href='/import/Ameriprise'>Ameriprise</a> | 
                        <a href='/import/EdwardJones'>Edward&nbsp;Jones</a> | 
                        <a href='/import/eTrade'>eTrade</a> | 
                        <a href='/import/JPMorganChase'>JPMorgan&nbsp;Chase</a> | 
                        <a href='/import/MerrillEdge'>Merrill&nbsp;Edge</a> | 
                        <a href='/import/MorganStanley'>Morgan&nbsp;Stanley</a> | 
                        <a href='/import/other'>other</a> | 
                        <a href='/import/RaymondJames'>Raymond&nbsp;James</a> | 
                        <a href='/import/TRowePrice'>T.&nbsp;Rowe&nbsp;Price</a></span><br/>
                        <a href='/import/TIAA'>TIAA</a><br/>
                    </div>

            @switch (Custodian)
            {
                case "Fidelity":
                                    <h3>Import from @Custodian:</h3>
                                    <p>
                                        <ol>
                                            <li>Log into <a target=_new href=https://fidelity.com>fidelity.com</a>↗️</li>
                                            <li>Click on the <a target=_new href=https://digital.fidelity.com/ftgw/digital/portfolio/positions>Positions</a>↗️ link</li>
                                            <li>Click on the Download button with this image: <img style=width:20px;height:20px src=/images/fidelity-download-csv.png />, found on the right side of screen just above the table for the first account's positions.</li>
                                            <li>A file named Portfolio_Positions_[DATE].csv will be downloaded via your browser</li>
                                            <li>Click "Choose File" button, find and choose the Portfolio_Positions_[DATE].csv file in Downloads folder</li>
                                            <fieldset style=margin-left:20px>
                                                <InputFile multiple accept=".csv,.xlsx" OnChange="@((e) => OnDataFilesImport(e))" /><br/>
                                                <ul>
                                                    <li>CAUTION: only share personal info (like these files) to apps worthy of your trust! See our privacy details in our <a href=/help>Help/FAQ page</a></li>
                                                </ul>
                                            </fieldset><br/>
                                            <li>Choose Account Type for each new account</li>
                                        </ol>
                                    </p>
                    break;
                case "Schwab":
                                    <h3>Import from @Custodian:</h3>
                                    <p>
                                        <ol>
                                            <li>Log into <a target=_new href=https://schwab.com>schwab.com</a>↗️</li>
                                            <li>Click on the <a target=_new href='https://client.schwab.com/app/accounts/positions/#/'>Positions</a>↗️ link</li>
                                            <li>Click on the Export link, found on the top-right of page.</li>
                                            <li>Read schwab warnings to "exercise caution when downloading data". If ok after reading, press ok to continue.</li>
                                            <li>A file named [Account Type]-Positions-[DATE]-######.csv will be downloaded via your browser</li>
                                            <li>Click "Choose File" button, find and choose the [Account Type]-Positions-[DATE]-######.csv file in Downloads folder</li>
                                            <fieldset style=margin-left:20px>
                                                <InputFile multiple accept=".csv,.xlsx" OnChange="@((e) => OnDataFilesImport(e))" /><br/>
                                                <ul>
                                                    <li>CAUTION: only share personal info (like these files) to apps worthy of your trust! See our privacy details in our <a href=/help>Help/FAQ page</a></li>
                                                </ul>
                                            </fieldset><br/>
                                            <li>Choose Account Type for each new account</li>
                                        </ol>
                                    </p>
                    break;
                case "TIAA":
                    <h3>Import from @Custodian:</h3>
                    <p>
                        <ol>
                            <li>Login to <a target=_new href=https://tiaa.org>tiaa.org</a>↗️</li>
                            <li>Click on "Accounts" and then choose the subgroup of accounts whose holdings you wish to download (e.g. "retirement")</li>
                            <li>Click the "Investments" tab to download holdings for all accounts; otherwise choose the specific account whose holdings you wish to download and only then click the "Investments" tab</li>
                            <li>At the top right of that tab find the link "Export data" and click on it</li>
                            <li>Click the choice for ".csv" file as the type of file to export</li>
                            <li>Click "Choose File" button, find and choose the "investments.csv" file in Downloads folder</li>
                            <fieldset style=margin-left:20px>
                                <InputFile multiple accept=".csv" OnChange="@((e) => OnDataFilesImport(e))" /><br/>
                                <ul>
                                    <li>CAUTION: only share personal info (like these files) to apps worthy of your trust! See our privacy details in our <a href=/help>Help/FAQ page</a></li>
                                </ul>
                            </fieldset><br/>
                            <li>Choose Account Type for each new account</li>
                        </ol>
                    </p>
                    break;
                case "TreasuryDirect":
                                    <h3>Import from @Custodian:</h3>
                                    <p>
                                        <ol>
                                            <li>(CSV file not available, but copy/paste technique works)</li>
                                            <li>Log into <a target=_new href=https://treasurydirect.gov>TreasuryDirect.gov</a>↗️</li>
                                            <li>Under current holdings, click on savings bonds link</li>
                                            <li>Select the radio button to the left of "Series I Savings Bond", press "submit" button</li>
                                            <li>In treasurydirect.gov page, find the table listing I bonds purchased in this account that looks like this:</li>
                        <pre>
                            Confirm #   Issue Date  Interest Rate  Status  Amount   Current Value
                            XXXXX       01-01-2024  5.27%                  $10,000  $10,000
                            XXXXX       01-01-2023  4.35%                  $10,000  $10,440
                        </pre>
                                            <li>Select that table including the header line and each row of data</li>
                                            <li>Copy it to the clipboard</li>
                                            <li>Paste it in textbox below, then press: <button @onclick=@importTD>Import text</button></li>
                                            <textarea style=width:100%;height:200px @bind-value="tdContent" @bind-value:event="oninput" /><br/>
                                        </ol>
                                    </p>                
                    break;
                case "Vanguard":
                                    <h3>Import from @Custodian:</h3>
                                    <p>
                                        <ol>
                                            <li>Log into <a target=_new href=https://vanguard.com>vanguard.com</a>↗️</li>
                                            <li>Click on the <a target=_new href=https://holdings.web.vanguard.com>Holdings</a>↗️ link</li>
                                            <li>Click on the <a target=_new href=https://personal1.vanguard.com/ofu-open-fin-exchange-webapp/ofx-welcome>Download Center</a>↗️ link to the right</li>
                                            <li>Step 1 - Choose "A spreadsheet-compatible CSV File"</li>
                                            <li>Step 2 - Choose any date range (I choose 18 months, but this app doesn't use this transaction information yet, so 1 month is fine too)</li>
                                            <li>Step 3 - Choose all accounts you'd like to export holdings info about</li>
                                            <li>Press Download button on bottom right of page - a file named OfxDownload.csv will be downloaded via your browser</li>
                                            <li>Click "Choose File" button, find and choose the OfxDownload.csv file in Downloads folder</li>
                                            <fieldset style=margin-left:20px>
                                                <InputFile multiple accept=".csv,.xlsx" OnChange="@((e) => OnDataFilesImport(e))" /><br/>
                                                <ul>
                                                    <li>CAUTION: only share personal info (like these files) to apps worthy of your trust! See our privacy details in our <a href=/help>Help/FAQ page</a></li>
                                                </ul>
                                            </fieldset><br/>                            
                                            <li>Choose Account Type for each new account and enter/verify Cost Basis for each taxable investment</li>
                                            <li>For Taxable accounts, update Cost Basis by copying "Total cost" of each investment from <a target=_new href=https://cost-basis.web.vanguard.com/unrealized>Vanguard's Cost Basis view</a>↗️</li>
                                        </ol>
                                    </p>
                    break;
                case "Ameriprise":
                case "eTrade":
                case "JPMorganChase":
                case "MerrillEdge":
                case "MorganStanley":
                case "TRowePrice":
                    string fileType = Custodian == "MorganStanley" ? "XLSX" : "CSV";
                                    <h3>Import from @Custodian:</h3>
                                    <ol>
                                        <li><b>Download data file</b>: download portfolio details (@fileType file) from @Custodian website</li>

                                        <ul>
                                            <li>Log into @Custodian website</li>
                                            <li>Find and download the data file</li>
                                        </ul>

                                        <li><b>Import data file</b>: Click "Choose Files" button to import new or updated account information into your <a href=/profiles>active MultiFol.io profile's</a> portfolio</li>
                                        <fieldset style=margin-left:20px>
                                            <InputFile multiple accept=".csv,.xlsx" OnChange="@((e) => OnDataFilesImport(e))" /><br/>
                                            <ul>
                                                <li>CAUTION: only share personal info (like these files) to apps worthy of your trust! See our privacy details in our <a href=/help>Help/FAQ page</a></li>
                                            </ul>
                                        </fieldset>
                                        <li><b>Choose Account Type</b>: Choose Account Type for each new account</li>
                                        <li><b>Cost Basis</b>: Enter/verify Cost Basis for each taxable investment</li>
                                    </ol>
                    break;
                case "EdwardJones":
                case "RaymondJames":
                case "other":
                                    <h3>Import from @Custodian:</h3>
                                    <p>
                                        <ol>
                            @if (Custodian == "other")
                            {
                                                    <li>If you custodian's CSV format isn't supported yet by MultiFol.io, we're probabaly happy to add support with your help:</li>
                            }
                            else
                            {
                                                    <li>@Custodian's CSV format isn't supported yet by MultiFol.io, we're happy to add support with your help:</li>
                            }
                                            <li>Download the CSV file for your account(s) from another Custodian</li>
                                            <li>Anonymize/change the data in that CSV file [using a text editor: change account number AY-424523 to XX-123456, change $ amounts of investments if you like, change any other personally identifying info.]</li>
                                            <li>Email the changed CSV file to <a href=mailto:suggestions@multifol.io>suggestions@multifol.io</a>
                                @if (Custodian != "other")
                                {
                                                    <span>&nbsp;along with the fact that it is a @Custodian CSV file.</span>
                                }
                                else
                                {
                                                    <span>&nbsp;along with your custodian's (broker's) company name</span>
                                }    
                                            </li>
                                        </ol>
                                    </p>
                    break;
                default:
                    break;
            }

            @if (Custodian != null)
            {
                <br/>

                <p><a href='/import'>&lt; Import Center</a></p>
            }
        }
        else
        { // BH format import
                    <p>Please paste in the text from a Bogleheads Portfolio Reivew post. Following correct format will improve chances of parsing working.</p>
                    <button @onclick=importBH>load</button>

            <br/>
                    <textarea cols=100 rows=50 @bind-value="bhContent" @bind-value:event="oninput" />
        }
    }
    else
    {
        if (appData?.FamilyData is not null)
        {
            bool alternateRow;
                    <EditForm Model=@appData.ImportResult>
                        <br/>
                        <div>Those data file(s) contain info on @(appData.ImportResult.UpdatedAccounts.Count + appData.ImportResult.NewAccounts.Count) accounts</div>
                        <br/>
                        Each account should be labeled with the correct owner and account type.<br/>
                        - First, choose/verify your Tax Filing Status: <select @bind=appData.FamilyData.TaxFilingStatus>
                            <option value="ChoiceNeeded">ChoiceNeeded</option>
                            <option>Single</option>
                            <option value=MarriedFilingJointly>Married filing jointly</option>
                            <option value=MarriedFilingSeperately>Married filing separately</option>
                            <option value=HeadOfHousehold>Head of Household</option>
                        </select><br/>
                @for (int i = 0; i < appData.FamilyData.PersonCount; i++)
                {
                    var person = appData.FamilyData.People[i];
                    if (person is not null)
                    {
                        int personIndex = i + 1;

                        @if (person?.FamilyData?.PersonCount > 1)
                        {
                            @if (i == 0)
                            {
                                                        <div>- Then choose pronouns/unique identifiers for each person:</div>
                            }
                                                <label style=padding-left:16px>Person @personIndex - Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                                <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                <option>person @personIndex</option>
                                                <option>him</option>
                                                <option>her</option>
                                                <option>me</option>
                                                <option>them</option>
                                            </select>

                            <br/>
                        }
                    }
                }
                        <span>- Then choose which account(s) to import, and fill in related info about them, then choose "Import selected accounts" button::</span><br/>
                        <br/>
                        <button @onclick=finishImport>Import selected accounts</button>
                        <button @onclick=cancelImport>Cancel Import</button>
                        <br/>
                        <br/>

                @foreach (var error in appData!.ImportResult!.Errors)
                {
                    if (error is not null && error.Exception is not null)
                    {
                                        <div style=font-weight:bold>Error: @error.Exception.Message</div>
                        @if (error.Exception.InnerException is not null)
                        {
                            <div>Failure location: <br/>@error.Exception.InnerException.StackTrace<br/><br/></div>
                        };
                        @if (error.Exception.InnerException is not null)
                        {
                            <div>Failure: <br/>@error.Exception.InnerException<br/><br/></div>
                        };
                    }
                }

                @if (appData.ImportResult.UpdatedAccounts.Count > 0)
                {
                                <div>
                                    <InputCheckbox @bind-Value=appData.ImportResult.ImportUpdatedAccounts /> UPDATE these EXISTING accounts  into <a href="/profiles">@appData.CurrentProfileName profile's</a> portfolio:</div>
                    @foreach (var account in appData.ImportResult.UpdatedAccounts)
                    {
                        alternateRow = false;
                                            <div style=margin-left:8px;background-color:black;color:white;margin-left:8px><InputCheckbox @bind-Value=account.Import /> <u>@account.Custodian @account.Note</u> =&gt; @FormatUtilities.FormatMoney(account.Value)</div>
                        @foreach (var investment in account.Investments)
                        {
                            string bgColor = alternateRow ? "white" : "lightgray";
                            alternateRow = !alternateRow;
                                                    <div style=margin-left:16px;background-color:@bgColor>
                                @investment.Name (@investment.Ticker
                                                            <span>&nbsp;</span>@FormatUtilities.FormatMonthPlus2DigitYear(investment.PurchaseDate)
                                                        ) @(investment.Shares) shares =&gt; @FormatUtilities.FormatMoney(investment.Value)<br/>
                                @if (account?.ReplaceAccount?.AccountType == "Taxable" && investment.AssetType != AssetTypes.Cash_MoneyMarket)
                                {
                                                                <div>@account.AccountType
                                                                    &nbsp;<label>Cost Basis: </label>
                                                                    <span>$</span>
                                                                    <input type=text style=width:100px;text-align:right @bind-Value=investment.CostBasis @bind-Value:event=oninput placeholder='cost basis'/>
                                                                </div>
                                }
                                                        <label style=padding-left:16px>Asset Type:</label>
                                @if (investment.AssetType == AssetTypes.Unknown || investment.AssetType == null)
                                {
                                                                <select @bind=investment.AssetType>
                                        @foreach (AssetTypes assetType in (AssetTypes[])Enum.GetValues(typeof(AssetTypes)))
                                        {
                                                                            <option>@assetType</option>
                                        }
                                                                </select>
                                }
                                else
                                {
                                                                <span>@investment.AssetType</span>
                                }
                                                        <br/>
                                                    </div>
                        }
                                            <br/>
                    }
                }
                else
                {
                                <span>These imported accounts all appear to be new accounts in this profile:</span>

                    <br/>
                }

                        <br/>
                @if (appData.ImportResult.NewAccounts.Count > 0)
                {
                                <div><InputCheckbox @bind-Value=appData.ImportResult.ImportNewAccounts /> ADD these NEW accounts into <a href="/profiles">@appData.CurrentProfileName profile's</a> portfolio:</div>
                    @foreach (var account in appData.ImportResult.NewAccounts)
                    {
                        alternateRow = false;
                                        <div style=margin-left:8px;background-color:black;color:white>
                                            <InputCheckbox @bind-Value=account.Import /> <u>@account.Custodian @account.Note</u> =&gt; @FormatUtilities.FormatMoney(account.Value)
                                            <br/>
                            @if (appData.FamilyData.PersonCount == 2)
                            {
                                                    <label>Account Owner(s):</label>
                                                    <select style=margin-left:8px @bind=account.Identifier>
                                                        <option>our</option>
                                    @for (int p = 0; p < appData.FamilyData.PersonCount; p++)
                                    {
                                                                <option>@appData.FamilyData.People[p].PossessiveID</option>
                                    }
                                                    </select>
                            }
                                            <label style=margin-left:16px;>Account Type:</label> <select @bind=account.AccountType>
                                                <option>Unknown</option>
                                                <option>401(k)</option>
                                                <option>403(b)</option>
                                                <option>457(b)</option>
                                                <option>457(b) Governmental</option>
                                                <option>529</option>
                                                <option>Annuity (Non-Qualified)</option>
                                                <option>Annuity (Qualified)</option>
                                                <option>Brokerage</option>
                                                <option>HSA</option>
                                                <option>Individual</option>
                                                <option>Inherited IRA</option>
                                                <option>Inherited Roth IRA</option>
                                                <option value="Traditional IRA">IRA</option>
                                                <option>Refundable Deposit</option>
                                                <option>Rollover IRA</option>
                                                <option>Roth 401(k)</option>
                                                <option>Roth IRA</option>
                                                <option>SEP IRA</option>
                                                <option>SIMPLE IRA</option>
                                                <option>Solo 401(k)</option>
                                                <option>Taxable</option>
                                                <option>Traditional IRA</option>
                                            </select>
                                        </div>
                        @if (account.TaxType == "Pre-Tax(work)")
                        {
                                                <div style=margin-left:8px;background-color:black;color:white>
                                                    <label>Employer:&nbsp;</label>
                                                    <InputRadioGroup @bind-Value="account.CurrentOrPrevious">
                                    @foreach (var option in Account.CurrentOrPreviousOptions)
                                    {
                                                                <InputRadio Value="option" /> 
                                        @if (option != "previous")
                                        {
                                            <span>&nbsp;@option&nbsp;|&nbsp;</span>
                                        }
                                        else
                                        {
                                            <span>&nbsp;@option</span>
                                        }
                                    }
                                                    </InputRadioGroup>
                                                </div>
                        }

                        @foreach (var investment in account.Investments)
                        {
                            string bgColor = alternateRow ? "white" : "lightgray";
                            alternateRow = !alternateRow;
                                                <div style=margin-left:16px;background-color:@bgColor>
                                @investment.Name (@investment.Ticker
                                @if (investment.IsIBond)
                                {
                                                            <span>&nbsp;@FormatUtilities.FormatMonthPlus2DigitYear(investment.PurchaseDate))</span>

                                    <br/>
                                }
                                else
                                {
                                                            <span>) @(investment.Shares) shares =&gt; @FormatUtilities.FormatMoney(investment.Value)</span>

                                    <br/>
                                }
                                @if (account.AccountType == "Taxable" && investment.AssetType != AssetTypes.Cash_MoneyMarket)
                                {
                                                        <label>Cost Basis: </label>
                                                        <span>$</span>

                                    <input type=text style=width:100px;text-align:right @bind-Value=investment.CostBasis @bind-Value:event=oninput placeholder='cost basis'/>
                                }
                                @if (investment.AssetType == AssetTypes.Unknown || investment.AssetType == null)
                                {
                                                        <label style=padding-left:16px>Asset Type:</label>
                                                        <select @bind=investment.AssetType>
                                        @foreach (AssetTypes assetType in (AssetTypes[])Enum.GetValues(typeof(AssetTypes)))
                                        {
                                                                    <option>@assetType</option>
                                        }
                                                        </select>
                                }
                                                </div>
                        }
                                        <br/>
                    }
                }

                        <button @onclick=finishImport>Import selected accounts</button>
                        <button @onclick=cancelImport>Cancel Import</button>
                        <br/>
                        <br/>
                    </EditForm>
        }
    }
</div>

@code {
    private void importBH()
    {
        ImportResult importResult = new();
        if (bhContent is not null)
        {
            var lines = bhContent.Split('\n');
            (var importedFamilyData, var links) = ImportPortfolioReview.ParsePortfolioReview(lines, appData);
            if (importedFamilyData.Accounts.Count > 0)
            {
                importResult.NewAccounts.AddRange(importedFamilyData.Accounts);
                appData.ImportResult = importResult;
            }
        }
    }

    private async void importTD()
    {
        await Investment.LoadIBondRates();
        ImportResult importResult = new();
        if (tdContent is not null)
        {
            var newAccount = new Account(appData.FamilyData) { Custodian = "Treasury Direct", AccountType = "Taxable" };
            var chunks = tdContent.Split('\t');
            DateOnly? purchasedDate = null;
            double? costBasis = null;
            foreach (var chunk in chunks)
            {
                Console.WriteLine("'{0}' date:{1} {2} dollar:{3}", chunk, chunk.IndexOf('-'), chunk.IndexOf('/'), chunk.IndexOf('$'));
                if (chunk.IndexOf('-') > -1 || chunk.IndexOf('/') > -1)
                {
                    purchasedDate = DateOnly.Parse(chunk);
                }
                else if (chunk.IndexOf('$') > -1 && costBasis == null && purchasedDate != null)
                {
                    costBasis = FormatUtilities.ParseDouble(chunk ?? "0.0", allowCurrency: true);
                }

                if (purchasedDate.HasValue && costBasis.HasValue)
                {
                    var investment = new Investment() { Ticker = "IBOND", AssetType = AssetTypes.IBond, PurchaseDate = purchasedDate, CostBasis = costBasis };
                    newAccount.Investments.Add(investment);
                    await investment.CalculateIBondValue();
                    purchasedDate = null;
                    costBasis = null;
                }
            }

            if (newAccount.Investments.Count > 0)
            {
                importResult.NewAccounts.Add(newAccount);

                appData.ImportResult = importResult;
                foreach (var account in appData.ImportResult.NewAccounts)
                {
                    account.Import = true;
                }

                if (appData.ImportResult.UpdatedAccounts.Count == 0)
                {
                    appData.ImportResult.ImportNewAccounts = true;
                }

                if (appData.ImportResult.NewAccounts.Count == 0)
                {
                    appData.ImportResult.ImportUpdatedAccounts = true;
                }

                Navigation.NavigateTo("/import");
            }
        }
    }

    private async Task OnDataFilesImport(InputFileChangeEventArgs e)
    {
        var namedStreams = BlazorUtilities.GetNamedStreamsFromBrowserFiles(e.GetMultipleFiles());

        if (appData?.FamilyData is not null && namedStreams is not null)
        {
            appData.ImportResult = await Importer.ImportDataFiles(namedStreams, appData.FamilyData);
            foreach (var account in appData.ImportResult.NewAccounts)
            {
                account.Import = true;
            }

            if (appData.ImportResult.UpdatedAccounts.Count == 0)
            {
                appData.ImportResult.ImportNewAccounts = true;
            }

            if (appData.ImportResult.NewAccounts.Count == 0)
            {
                appData.ImportResult.ImportUpdatedAccounts = true;
            }

            foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
            {
                if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
                {
                    foreach (var updatedInvestment in updatedAccount.Investments)
                    {
                        foreach (var existingInvestment in updatedAccount.ReplaceAccount.Investments)
                        {
                            if (existingInvestment.Ticker == updatedInvestment.Ticker)
                            {
                                updatedInvestment.CostBasis = existingInvestment.CostBasis;
                            }
                        }
                    }
                }
            }
        }
    }
    private async void finishImport()
    {
        if (appData?.ImportResult is not null && appData?.FamilyData is not null)
        {
            foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
            {
                if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
                {
                    updatedAccount.ReplaceAccount.Investments.Clear();
                    updatedAccount.ReplaceAccount.Investments.AddRange(updatedAccount.Investments);
                }
            }

            foreach (var newAccount in appData.ImportResult.NewAccounts)
            {
                if (newAccount.Import)
                {
                    appData.FamilyData.Accounts.Add(newAccount);
                }
            }

            await appData.FamilyData.UpdateStatsAsync();
            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);

            appData.ImportResult = null;
            Navigation.NavigateTo("/portfolio-tracker");
        }
    }

    private void cancelImport()
    {
        appData.ImportResult = null;
        Navigation.NavigateTo("/portfolio-tracker");
    }

    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

    protected override void OnInitialized()
    {
        csvImport = !Navigation.Uri.Contains("/import-accounts-bh");
        pageHeading = csvImport ? "Import Center" : "Import Accounts from Bogleheads Portfolio Review format";

        base.OnInitialized();
    }

    [Parameter]
    public string? Custodian { get; set; }
    private bool showError { get; set; }
    private string? pageHeading;
    private bool csvImport = false;
    private string bhContent = "";
    private string tdContent = "";
}